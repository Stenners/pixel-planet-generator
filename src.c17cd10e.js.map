{"version":3,"sources":["src/utils/perlin_noise.js","src/utils/rng.js","src/index.js"],"names":["PerlinNoise","shuffle","array","rng","end","i","temp","length","Math","round","unit","seed","permutation","Array","p","prototype","noise","x","y","z","X","floor","Y","Z","u","fade","v","w","A","AA","AB","B","BA","BB","result","lerp","grad","t","a","b","hash","h","RNG","getSeed","c","m","pow","s","charCodeAt","withAsteroids","ctx","document","getElementsByTagName","getContext","seedField","getElementById","pixelSizeField","randomButton","mouseDown","justReleasedMouse","mousePos","mouseDiff","map","a1","a2","b1","b2","setColor","data","r","g","pixelSize","xx","yy","generateRedTypePlanet","n","texture_data","heightmap_width","generateEarthTypePlanet","generateGasTypePlanet","addEventListener","e","generate","randomSeed","window","clientX","clientY","asteroids","orbitRadius","orbitAngle","numAsteroids","orbitInclinationAngle","planetRotationDiff","planetType","stars","asteroidColors","heightmap_height","dphi","rotationMomentum","radius","RED_TYPE","EARTH_TYPE","GAS_TYPE","imageData","createImageData","ceil","random","String","fromCharCode","value","id","wait","clearTimeout","setTimeout","parseInt","orbitRadiusInner","diffRadius","PI","angle","rad","cos","sin","size","push","phi","theta","abs","zz","amplitude","frequency","o","console","log","putImageData","animate","fillStyle","fillRect","orbitAnglePerFrame","astXYZ","asteroid","astX","astZ","astY","render_planet","requestAnimationFrame","canvas_data","x1","x2","angle1","angle2"],"mappings":";AAuGeA,aAvGf,SAASC,EAAQC,EAAOC,GAIhBC,IAHHA,IACAC,EACAC,EAFAF,EAAMF,EAAMK,OAAS,EAGlBH,EAAM,GACZC,EAAIG,KAAKC,MAAMN,EAAIO,QAAUN,EAAM,IACnCE,EAAOJ,EAAME,GACbF,EAAME,GAAOF,EAAMG,GACnBH,EAAMG,GAAKC,EACXF,IAMF,SAASJ,EAAYG,GACfQ,KAAAA,KAAOR,EAAIQ,KACXC,KAAAA,YAAc,IAAIC,MAAM,KACxBC,KAAAA,EAAI,IAAID,MAAM,KACd,IAAA,IAAIR,EAAI,EAAGA,EAAI,IAAKA,IACnBO,KAAAA,YAAYP,GAAKA,EAEvBJ,EAAQ,KAAKW,YAAaT,GACrB,IAAIE,EAAI,EAAGA,EAAI,IAAKA,IACnBS,KAAAA,EAAET,GAAK,KAAKS,EAAET,EAAI,KAAO,KAAKO,YAAYP,GA+ElCL,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA3EfA,EAAYe,UAAY,CAEvBC,MAAO,SAAUC,EAAGC,EAAGC,GAClBC,IAAAA,EAAoB,IAAhBZ,KAAKa,MAAMJ,GACfK,EAAoB,IAAhBd,KAAKa,MAAMH,GACfK,EAAoB,IAAhBf,KAAKa,MAAMF,GAEnBF,GAAKT,KAAKa,MAAMJ,GAChBC,GAAKV,KAAKa,MAAMH,GAChBC,GAAKX,KAAKa,MAAMF,GAEZK,IAAAA,EAAI,KAAKC,KAAKR,GACdS,EAAI,KAAKD,KAAKP,GACdS,EAAI,KAAKF,KAAKN,GAEdS,EAAI,KAAKd,EAAEM,GAAKE,EAAGO,EAAK,KAAKf,EAAEc,GAAKL,EAAGO,EAAK,KAAKhB,EAAEc,EAAI,GAAKL,EAC/DQ,EAAI,KAAKjB,EAAEM,EAAI,GAAKE,EAAGU,EAAK,KAAKlB,EAAEiB,GAAKR,EAAGU,EAAK,KAAKnB,EAAEiB,EAAI,GAAKR,EAO1DW,OALM,KAAKC,KAAKR,EAAG,KAAKQ,KAAKT,EAAG,KAAKS,KAAKX,EAAG,KAAKY,KAAK,KAAKtB,EAAEe,GAAKZ,EAAGC,EAAGC,GAAI,KAAKiB,KAAK,KAAKtB,EAAEkB,GAAKf,EAAI,EAAGC,EAAGC,IACnH,KAAKgB,KAAKX,EAAG,KAAKY,KAAK,KAAKtB,EAAEgB,GAAKb,EAAGC,EAAI,EAAGC,GAAI,KAAKiB,KAAK,KAAKtB,EAAEmB,GAAKhB,EAAI,EAAGC,EAAI,EAAGC,KACrF,KAAKgB,KAAKT,EAAG,KAAKS,KAAKX,EAAG,KAAKY,KAAK,KAAKtB,EAAEe,EAAK,GAAIZ,EAAGC,EAAGC,EAAI,GAAI,KAAKiB,KAAK,KAAKtB,EAAEkB,EAAK,GAAIf,EAAI,EAAGC,EAAGC,EAAI,IACzG,KAAKgB,KAAKX,EAAG,KAAKY,KAAK,KAAKtB,EAAEgB,EAAK,GAAIb,EAAGC,EAAI,EAAGC,EAAI,GAAI,KAAKiB,KAAK,KAAKtB,EAAEmB,EAAK,GAAIhB,EAAI,EAAGC,EAAI,EAAGC,EAAI,OAKxGgB,KAAM,SAAUE,EAAGC,EAAGC,GACdD,OAAAA,EAAID,GAAKE,EAAID,IAGrBb,KAAM,SAAUY,GACRA,OAAAA,EAAIA,EAAIA,GAAKA,GAAS,EAAJA,EAAQ,IAAM,KAGxCD,KAAM,SAAUI,EAAMvB,EAAGC,EAAGC,GAGnBsB,OAFO,GAAPD,GAGF,KAAA,EACGvB,OAAAA,EAAIC,EACP,KAAA,EACGD,OAAAA,EAAIC,EACP,KAAA,EACG,OAACD,EAAIC,EACR,KAAA,EACG,OAACD,EAAIC,EACR,KAAA,EACGD,OAAAA,EAAIE,EACP,KAAA,EACGF,OAAAA,EAAIE,EACP,KAAA,EACG,OAACF,EAAIE,EACR,KAAA,EACG,OAACF,EAAIE,EACR,KAAA,EACGD,OAAAA,EAAIC,EACP,KAAA,EACGD,OAAAA,EAAIC,EACP,KAAA,GACG,OAACD,EAAIC,EACR,KAAA,GACG,OAACD,EAAIC,EACR,KAAA,GACGF,OAAAA,EAAIC,EACP,KAAA,GACGD,OAAAA,EAAIC,EACP,KAAA,GACG,OAACD,EAAIC,EACR,KAAA,GACG,OAACD,EAAIC,KAMDlB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACnFA0C,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EApBTA,IAAAA,EAoBSA,WAnBD/B,SAAAA,EAAAA,GAAM,EAAA,KAAA,GACXA,KAAAA,KAA4B,gBAArB,KAAKgC,QAAQhC,GACpB2B,KAAAA,EAAI,MACJM,KAAAA,EAAI,EACJC,KAAAA,EAAIrC,KAAKsC,IAAI,EAAG,IAAM,EAehBJ,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,UAbL/B,MAAAA,SAAAA,GAED,IADDoC,IAAAA,EAAI,MACC1C,EAAI,EAAGA,EAAIM,EAAKJ,OAAQF,IAC/B0C,IAAM1C,EAAI,GAAKM,EAAKqC,WAAW3C,GAE1B0C,OAAAA,IAQIL,CAAAA,IAAAA,OANN,MAAA,WAEE,OADF/B,KAAAA,MAAQ,KAAK2B,EAAI,KAAK3B,KAAO,KAAKiC,GAAK,KAAKC,EAC1C,KAAKlC,MAAQ,KAAKkC,EAAI,OAIlBH,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACuTd,aA3UD,IAAA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,gBA0UC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxUD,IA0FIvC,EAEA8C,EA5FAC,EAAMC,SAASC,qBAAqB,UAAU,GAAGC,WAAW,MAC5DC,EAAYH,SAASI,eAAe,cACpCC,EAAiBL,SAASI,eAAe,mBACzCE,EAAeN,SAASI,eAAe,cAEvCG,GAAY,EACZC,GAAoB,EACpBC,EAAW,CAAE3C,EAAG,EAAGC,EAAG,GACtB2C,EAAY,CAAE5C,EAAG,EAAGC,EAAG,GA8B3B,SAAS4C,EAAIlB,EAAGmB,EAAIC,EAAIC,EAAIC,GACnBD,OAAAA,GAAOrB,EAAImB,IAAOC,EAAKD,IAAQG,EAAKD,GAG7C,SAASE,EAASC,EAAMnD,EAAGC,EAAGS,EAAG0C,EAAGC,EAAG/B,EAAGD,EAAGiC,GAC3CA,EAAYA,GAAa,EACpB,IAAA,IAAIC,EAAKvD,EAAGuD,EAAKvD,EAAIsD,EAAWC,IAC9B,IAAA,IAAIC,EAAKvD,EAAGuD,EAAKvD,EAAIqD,EAAWE,IACnCL,EAAqB,GAAfI,EAAKC,EAAK9C,IAAU0C,EAC1BD,EAAqB,GAAfI,EAAKC,EAAK9C,GAAS,GAAK2C,EAC9BF,EAAqB,GAAfI,EAAKC,EAAK9C,GAAS,GAAKY,EAC9B6B,EAAqB,GAAfI,EAAKC,EAAK9C,GAAS,GAAKW,EAKpC,SAASoC,EAAsBC,EAAGC,EAAc3D,EAAGC,EAAG2D,EAAiBN,GACjEI,EAAI,IAENR,EAASS,EAAc3D,EAAGC,EAAG2D,EAD7BF,EAAIA,EAAI,IAAM,IAAMA,EAC6BnE,KAAKC,MAAU,GAAJkE,GAAUnE,KAAKC,MAAMkE,EAAI,GAAIA,EAAGJ,GACnFI,EAAI,IACbR,EAASS,EAAc3D,EAAGC,EAAG2D,EAAiBrE,KAAKC,MAAU,GAAJkE,GAAUnE,KAAKC,MAAU,GAAJkE,GAAUnE,KAAKC,MAAMkE,EAAI,GAAIA,EAAGJ,GAE9GJ,EAASS,EAAc3D,EAAGC,EAAG2D,EAAiBF,EAAGnE,KAAKC,MAAMkE,EAAI,GAAInE,KAAKC,MAAMkE,EAAI,GAAIA,EAAGJ,GAG9F,SAASO,EAAwBH,EAAGC,EAAc3D,EAAGC,EAAG2D,EAAiBN,GACnEI,EAAI,IAGNR,EAASS,EAAc3D,EAAGC,EAAG2D,EAAiB,GAAI,IAAK,IAFvDF,EAAIA,EAAI,GAAK,GAAKA,EAE6CJ,GAS/DJ,EAASS,EAAc3D,EAAGC,EAAG2D,EAAiB,IAAK,IAAK,IAAKF,EAAGJ,GAIpE,SAASQ,EAAsBJ,EAAGC,EAAc3D,EAAGC,EAAG2D,EAAiBN,GACjEI,EAAI,KACNA,EAAIA,EAAI,IAAM,IAAMA,EACpBR,EAASS,EAAc3D,EAAGC,EAAG2D,EAAiBrE,KAAKC,MAAMkE,EAAI,GAAInE,KAAKC,MAAMkE,EAAI,GAAIA,EAAGA,EAAGJ,IAG1FJ,EAASS,EAAc3D,EAAGC,EAAG2D,EAAiBrE,KAAKC,MAAMkE,EAAI,GAAInE,KAAKC,MAAU,GAAJkE,GAAUA,EAAGA,EAAGJ,GA7EhGjB,EAAU0B,iBAAiB,QAAS,SAAUC,GAC5CC,GAAS,KAGX1B,EAAewB,iBAAiB,QAAS,SAAUC,GACjDC,GAAS,KAGXzB,EAAauB,iBAAiB,QAAS,SAAUC,GAC/CE,MAGFC,OAAOJ,iBAAiB,YAAa,SAAUC,GAC7CvB,GAAY,IAGd0B,OAAOJ,iBAAiB,UAAW,SAAUC,GAC3CvB,GAAY,EACZC,GAAoB,IAGtByB,OAAOJ,iBAAiB,YAAa,SAAUC,GAC7CpB,EAAU5C,EAAIgE,EAAEI,QAAUzB,EAAS3C,EACnC4C,EAAU3C,EAAI+D,EAAEK,QAAU1B,EAAS1C,EACnC0C,EAAS3C,EAAIgE,EAAEI,QACfzB,EAAS1C,EAAI+D,EAAEK,UA2DjB,IACIC,EACAC,EACAC,EACAC,EACAC,EAMAC,EAIAC,EAEA7E,EAIA8E,EArBAC,EAAiB,CAAC,CAAC,IAAK,GAAI,IAAK,CAAC,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,KAOxDlB,EAAkB,IAClBmB,EAAmB,IAEnBC,EAAO,EAEPC,EAAmB,EAEnBC,EAAS,IAETC,EAAW,EAAGC,EAAa,EAAGC,EAAW,EAEzCC,EAAYrD,EAAIsD,gBAAgB3B,EAAiBmB,GACjDpB,EAAe2B,EAAUnC,KAM7B,SAASe,IAKF,IAHDR,IAAAA,EAAInE,KAAKiG,KAAqB,GAAhBjG,KAAKkG,UACnB/F,EAAO,GAEFN,EAAI,EAAGA,EAAIsE,EAAGtE,IAErBM,GAAQgG,OAAOC,aAAapG,KAAKC,MAAuB,GAAjBD,KAAKkG,UAAyB,IAGvEpD,EAAUuD,MAAQlG,EAClBuE,IAbFA,GAAS,GAgBT,IAAI4B,EAAK,KAET,SAAS5B,EAAS6B,GACZA,GAAAA,EAQF,OAPW,OAAPD,GACF1B,OAAO4B,aAAaF,QAEtBA,EAAK1B,OAAO6B,WAAW,WACrB/B,GAAS,IACR,MAKCvE,IAAAA,EAAO2C,EAAUuD,MACjB1G,EAAM,IAAIuC,EAAJ,QAAQ/B,GACd4D,EAAY2C,SAAS1D,EAAeqD,QAAU,EAEpD5D,GAAgB,EACZ9C,EAAIO,OAAS,KACfuC,GAAgB,GAGlBsC,EAAY,GACR4B,IAAAA,EAAgC,IAAbhH,EAAIO,OAAe,IAEtC0G,EADmBD,EAAmB,GACNA,EAKhClE,GAJJwC,EAAa,EACbC,EAA4B,IAAbvF,EAAIO,OAAe,GAClCiF,GAAyBxF,EAAIO,OAASF,KAAK6G,GAAK,GAE5CpE,EACG,IAAA,IAAIX,EAAI,EAAGA,EAAIoD,EAAcpD,IAAK,CACjCgF,IAAAA,EAAQnH,EAAIO,OAASF,KAAK6G,GAAK,EAC/BE,EAAMJ,EAAmBhH,EAAIO,OAAS0G,EACtCnG,EAAIsG,EAAM/G,KAAKgH,IAAIF,GACrBpG,EAA+B,IAAb,EAAbf,EAAIO,OAAe,GACxBS,EAAIoG,EAAM/G,KAAKiH,IAAIH,GACnB1E,EAAIpC,KAAKC,MAAmB,EAAbN,EAAIO,QACnBgH,EAAOlH,KAAKC,MAAmB,EAAbN,EAAIO,OAAa,GAErC6E,EAAUoC,KAAK,CAAC1G,EAAGC,EAAGC,EAAGmG,EAAOvB,EAAenD,GAAG,GAAImD,EAAenD,GAAG,GAAImD,EAAenD,GAAG,GAAI8E,IAKtG9B,EAAkC,IAAbzF,EAAIO,OACzBM,EAAQ,IAAIhB,EAAJ,QAAgB,IAAI0C,EAAJ,QAAQ/B,IAEhCkF,EAAarF,KAAKC,MAAmB,EAAbN,EAAIO,QAEvB,IAAIO,EAAI,EAAGA,EAAI4D,EAAiB5D,GAAKsD,EACnC,IAAIrD,EAAI,EAAGA,EAAI8E,EAAkB9E,GAAKqD,EAAW,CAU/C,IATDqD,IAAAA,EAAM9D,EAAI7C,EAAG,EAAG4D,EAAkB,EAAI,IAAarE,KAAK6G,GAAKpB,GAAOzF,KAAK6G,GAAK,EAAMpB,GACtF4B,EAAQ/D,EAAI5C,EAAG,EAAG8E,EAAmB,EAAGxF,KAAK6G,GAAI,GAC/C7C,EAAK2B,EAAS3F,KAAKsH,IAAItH,KAAKiH,IAAII,IAAUrH,KAAKgH,IAAII,GACrDnD,EAAK0B,EAAS3F,KAAKgH,IAAIK,GACvBE,EAAK5B,EAAS3F,KAAKsH,IAAItH,KAAKiH,IAAII,IAAUrH,KAAKiH,IAAIG,GAEjDI,EAAY,EAAKC,EAAY,KAE7BtD,EAAI,EACCuD,EAAI,EAAGA,EAAI,EAAGA,IACrBvD,GAAKqD,EAAYhH,EAAMA,MAAMwD,EAAKyD,EAAWxD,EAAKwD,EAAWF,EAAKE,GAClED,GAAa,GACbC,GAAa,EAEftD,GAAK,EACLA,GAAK,GACLA,EAAInE,KAAKC,MAAU,IAAJkE,GAEXkB,IAAeO,EACjB1B,EAAsBC,EAAGC,EAAc3D,EAAGC,EAAG2D,EAAiBN,GACrDsB,IAAeQ,EACxBvB,EAAwBH,EAAGC,EAAc3D,EAAGC,EAAG2D,EAAiBN,GACvDsB,IAAeS,GACxBvB,EAAsBJ,EAAGC,EAAc3D,EAAGC,EAAG2D,EAAiBN,GAKpE4D,QAAQC,IAAIvC,GAWZ3C,EAAImF,aAAa9B,EAAW,EAAG,GAOjC,SAAS+B,EAAQ1D,EAAcuB,GAC7BjD,EAAIqF,UAAY,QAChBrF,EAAIsF,SAAS,EAAG,EAAG,IAAK,KAEpB7G,IAAAA,EAAIkD,EACNpC,EAAIuD,EACFO,EAAYrD,EAAIsD,gBAAgB,IAAK,KACrCpC,EAAOmC,EAAUnC,KAcjBnB,GAAAA,EAAe,CAGZ,IAFDwF,IACAC,EAAS,GACJpG,EAAI,EAAGA,EAAIiD,EAAUhF,OAAQ+B,IAAK,CACrCqG,IAAAA,EAAWpD,EAAUjD,GACrBsG,EAAOD,EAAS,GAAKnI,KAAKgH,IAAI/B,GAAckD,EAAS,GAAKnI,KAAKiH,IAAIhC,GACnEoD,EAAOF,EAAS,GAAKnI,KAAKiH,IAAIhC,GAAckD,EAAS,GAAKnI,KAAKgH,IAAI/B,GAEvEmD,EAAOpI,KAAKC,MAAMmI,GAAQ,IACtBE,IAAAA,EAAOtI,KAAKC,MAAMkI,EAAS,GAAKnI,KAAKgH,IAAI7B,GAAyBkD,EAAOrI,KAAKiH,IAAI9B,IAA0B,IAChHkD,EAAOrI,KAAKC,MAAMkI,EAAS,GAAKnI,KAAKiH,IAAI9B,GAAyBkD,EAAOrI,KAAKgH,IAAI7B,IAElF+C,EAAOf,KAAKiB,EAAME,EAAMD,GAE1BpD,IAb0B,IAerB,IAAInD,EAAI,EAAGA,EAAIoG,EAAOnI,OAAQ+B,GAAK,EAClCoG,EAAOpG,EAAI,GAAK,GAClB6B,EAASC,EAAMsE,EAAOpG,GAAIoG,EAAOpG,EAAI,GAAI,IAAKiD,EAAUjD,EAAI,GAAG,GAAIiD,EAAUjD,EAAI,GAAG,GAAIiD,EAAUjD,EAAI,GAAG,GAAI,IAAKiD,EAAUjD,EAAI,GAAG,IAUrIW,GALJ8F,EAAc3E,EAAMQ,EAAcuB,EAAQxE,EAAGc,EAAG,EAAGd,EAAI,IAAanB,KAAK6G,IAAK7G,KAAK6G,GAAK,GAKpFpE,EACG,IAAIX,EAAI,EAAGA,EAAIoG,EAAOnI,OAAQ+B,GAAK,EAClCoG,EAAOpG,EAAI,IAAM,GACnB6B,EAASC,EAAMsE,EAAOpG,GAAIoG,EAAOpG,EAAI,GAAI,IAAKiD,EAAUjD,EAAI,GAAG,GAAIiD,EAAUjD,EAAI,GAAG,GAAIiD,EAAUjD,EAAI,GAAG,GAAI,IAAKiD,EAAUjD,EAAI,GAAG,IAKzIY,EAAImF,aAAa9B,EAAW,EAAG,GAE/BN,GAAQL,EAAqBM,EAEzBxC,IACFuC,GAAsB,KAAdpC,EAAU5C,GAOpBmE,OAAO4D,sBAAsB,WAC3BV,EAAQ1D,EAAcuB,KAK1B,SAAS4C,EAAcE,EAAarE,EAAcuB,EAAQxE,EAAGc,EAAGyG,EAAIC,EAAIC,EAAQC,GACzE,IAAA,IAAIpI,EAAIiI,EAAIjI,EAAIkI,EAAIlI,IAClB,IAAA,IAAIC,EAAI,EAAGA,EAAIuB,EAAGvB,IAAK,CACtB0G,IAAAA,EAAM9D,EAAI7C,EAAGiI,EAAIC,EAAIC,EAASnD,EAAMoD,EAASpD,GAC/C4B,EAAQ/D,EAAI5C,EAAG,EAAGuB,EAAI,EAAGjC,KAAK6G,GAAI,GAEhChD,EAAIO,EAA2B,GAAb3D,EAAIC,EAAIS,IAC5B2C,EAAIM,EAA2B,GAAb3D,EAAIC,EAAIS,GAAS,GACnCY,EAAIqC,EAA2B,GAAb3D,EAAIC,EAAIS,GAAS,GAGjC4F,GAFE3C,EAA2B,GAAb3D,EAAIC,EAAIS,GAAS,GAE3BwE,GAEN4B,EAAKR,EAAM/G,KAAKsH,IAAItH,KAAKiH,IAAII,IAAUrH,KAAKiH,IAAIG,GAClDpD,EAAKhE,KAAKC,MAAM8G,EAAM/G,KAAKsH,IAAItH,KAAKiH,IAAII,IAAUrH,KAAKgH,IAAII,IAAQ,IACnEnD,EAAKjE,KAAKC,MAAM8G,EAAM/G,KAAKgH,IAAIK,IAAU,IACvCE,GAAM,GACR5D,EAAS8E,EAAazE,EAAIC,EAAI,IAAKJ,EAAGC,EAAG/B,EAAG,MA9FpD+F,EAAQ1D,EAAcuB","file":"src.c17cd10e.js","sourceRoot":"..","sourcesContent":["function shuffle(array, rng) {\n\tvar end = array.length - 1;\n\tvar i;\n\tvar temp;\n\twhile (end > 0) {\n\t\ti = Math.round(rng.unit() * (end - 1));\n\t\ttemp = array[end];\n\t\tarray[end] = array[i];\n\t\tarray[i] = temp;\n\t\tend--;\n\t}\n}\n\n// Refactor to Class? \n\nfunction PerlinNoise(rng) {\n\tthis.seed = rng.seed;\n\tthis.permutation = new Array(256);\n\tthis.p = new Array(512);\n\tfor (var i = 0; i < 256; i++) {\n\t\tthis.permutation[i] = i;\n\t}\n\tshuffle(this.permutation, rng);\n\tfor (var i = 0; i < 256; i++) {\n\t\tthis.p[i] = this.p[i + 256] = this.permutation[i];\n\t}\n}\n\nPerlinNoise.prototype = {\n\n\tnoise: function (x, y, z) {\n\t\tvar X = Math.floor(x) & 255;\n\t\tvar Y = Math.floor(y) & 255;\n\t\tvar Z = Math.floor(z) & 255;\n\n\t\tx -= Math.floor(x);\n\t\ty -= Math.floor(y);\n\t\tz -= Math.floor(z);\n\n\t\tvar u = this.fade(x);\n\t\tvar v = this.fade(y);\n\t\tvar w = this.fade(z);\n\n\t\tvar A = this.p[X] + Y, AA = this.p[A] + Z, AB = this.p[A + 1] + Z,\n\t\t\tB = this.p[X + 1] + Y, BA = this.p[B] + Z, BB = this.p[B + 1] + Z;\n\n\t\tvar result = this.lerp(w, this.lerp(v, this.lerp(u, this.grad(this.p[AA], x, y, z), this.grad(this.p[BA], x - 1, y, z)),\n\t\t\tthis.lerp(u, this.grad(this.p[AB], x, y - 1, z), this.grad(this.p[BB], x - 1, y - 1, z))),\n\t\t\tthis.lerp(v, this.lerp(u, this.grad(this.p[AA + 1], x, y, z - 1), this.grad(this.p[BA + 1], x - 1, y, z - 1)),\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB + 1], x, y - 1, z - 1), this.grad(this.p[BB + 1], x - 1, y - 1, z - 1))));\n\n\t\treturn result;\n\t},\n\n\tlerp: function (t, a, b) {\n\t\treturn a + t * (b - a);\n\t},\n\n\tfade: function (t) {\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\n\t},\n\n\tgrad: function (hash, x, y, z) {\n\t\tvar h = hash & 15;\n\n\t\tswitch (h) {\n\t\t\tcase 0:\n\t\t\t\treturn x + y;\n\t\t\tcase 1:\n\t\t\t\treturn x - y;\n\t\t\tcase 2:\n\t\t\t\treturn -x + y;\n\t\t\tcase 3:\n\t\t\t\treturn -x - y;\n\t\t\tcase 4:\n\t\t\t\treturn x + z;\n\t\t\tcase 5:\n\t\t\t\treturn x - z;\n\t\t\tcase 6:\n\t\t\t\treturn -x + z;\n\t\t\tcase 7:\n\t\t\t\treturn -x - z;\n\t\t\tcase 8:\n\t\t\t\treturn y + z;\n\t\t\tcase 9:\n\t\t\t\treturn y - z;\n\t\t\tcase 10:\n\t\t\t\treturn -y + z;\n\t\t\tcase 11:\n\t\t\t\treturn -y - z;\n\t\t\tcase 12:\n\t\t\t\treturn x + y;\n\t\t\tcase 13:\n\t\t\t\treturn x - y;\n\t\t\tcase 14:\n\t\t\t\treturn -x + y;\n\t\t\tcase 15:\n\t\t\t\treturn -x - y;\n\t\t}\n\t}\n\n}\n\nexport default PerlinNoise;","class RNG {\n  constructor(seed) {\n    this.seed = this.getSeed(seed) * 394875498754986; //394875498754986 could be any big number\n    this.a = 16807;\n    this.c = 0;\n    this.m = Math.pow(2, 31) - 1;\n  }\n  getSeed(seed) {\n    var s = 34737;\n    for (var i = 0; i < seed.length; i++) {\n      s += (i + 1) * seed.charCodeAt(i);\n    }\n    return s;\n  }\n  unit() {\n    this.seed = (this.a * this.seed + this.c) % this.m;\n    return this.seed / (this.m - 1);\n  }\n}\n\nexport default RNG;\n","import PerlinNoise from './utils/perlin_noise';\nimport RNG from './utils/rng';\n\nvar ctx = document.getElementsByTagName(\"canvas\")[0].getContext(\"2d\");\nvar seedField = document.getElementById(\"seed_field\");\nvar pixelSizeField = document.getElementById(\"pixelSize_field\");\nvar randomButton = document.getElementById(\"random_btn\");\n\nvar mouseDown = false;\nvar justReleasedMouse = false;\nvar mousePos = { x: 0, y: 0 };\nvar mouseDiff = { x: 0, y: 0 };\n\nseedField.addEventListener(\"input\", function (e) {\n  generate(true);\n});\n\npixelSizeField.addEventListener(\"input\", function (e) {\n  generate(false);\n});\n\nrandomButton.addEventListener(\"click\", function (e) {\n  randomSeed()\n});\n\nwindow.addEventListener(\"mousedown\", function (e) {\n  mouseDown = true;\n});\n\nwindow.addEventListener(\"mouseup\", function (e) {\n  mouseDown = false;\n  justReleasedMouse = true;\n});\n\nwindow.addEventListener(\"mousemove\", function (e) {\n  mouseDiff.x = e.clientX - mousePos.x;\n  mouseDiff.y = e.clientY - mousePos.y;\n  mousePos.x = e.clientX;\n  mousePos.y = e.clientY;\n});\n\nfunction map(c, a1, a2, b1, b2) {\n  return b1 + ((c - a1) / (a2 - a1)) * (b2 - b1);\n}\n\nfunction setColor(data, x, y, w, r, g, b, a, pixelSize) {\n  pixelSize = pixelSize || 1;\n  for (var xx = x; xx < x + pixelSize; xx++) {\n    for (var yy = y; yy < y + pixelSize; yy++) {\n      data[(xx + yy * w) * 4] = r;\n      data[(xx + yy * w) * 4 + 1] = g;\n      data[(xx + yy * w) * 4 + 2] = b;\n      data[(xx + yy * w) * 4 + 3] = a;\n    }\n  }\n}\n\nfunction generateRedTypePlanet(n, texture_data, x, y, heightmap_width, pixelSize) {\n  if (n < 150) {\n    n = n < 110 ? 110 : n;\t//So the earth is not too dark\n    setColor(texture_data, x, y, heightmap_width, n, Math.round(n * 0.6), Math.round(n / 2), n, pixelSize);\n  } else if (n < 210)\n    setColor(texture_data, x, y, heightmap_width, Math.round(n * 0.8), Math.round(n * 0.4), Math.round(n / 2), n, pixelSize);\n  else\n    setColor(texture_data, x, y, heightmap_width, n, Math.round(n / 2), Math.round(n / 3), n, pixelSize);\n}\n\nfunction generateEarthTypePlanet(n, texture_data, x, y, heightmap_width, pixelSize) {\n  if (n < 140) {\n    n = n < 70 ? 70 : n;\t//So the water is not too dark\n    // setColor(texture_data, x, y, heightmap_width, 0, 0, n, n, pixelSize);\n    setColor(texture_data, x, y, heightmap_width, 64, 166, 246, n, pixelSize);\n  }\n  // else if (n < 180) {\n  //   // setColor(texture_data, x, y, heightmap_width, 214, 228, 189, n, pixelSize); \n  //    setColor(texture_data, x, y, heightmap_width, 167, 239, 112, n, pixelSize); \n  // } \n  else {\n    // setColor(texture_data, x, y, heightmap_width, n, n, n, n, pixelSize);\n    // setColor(texture_data, x, y, heightmap_width, 57, 183, 100, n, pixelSize);\n    setColor(texture_data, x, y, heightmap_width, 167, 239, 112, n, pixelSize); \n  }\n}\n\nfunction generateGasTypePlanet(n, texture_data, x, y, heightmap_width, pixelSize) {\n  if (n < 210) {\n    n = n < 120 ? 120 : n;\t//So the gas is not too dark\n    setColor(texture_data, x, y, heightmap_width, Math.round(n / 3), Math.round(n / 2), n, n, pixelSize);\n  }\n  else\n    setColor(texture_data, x, y, heightmap_width, Math.round(n / 3), Math.round(n * 0.6), n, n, pixelSize);\n}\n\nvar rng;\n\nvar withAsteroids;\n\nvar asteroidColors = [[130, 72, 41], [96, 60, 39], [91, 73, 64]];\nvar asteroids;\nvar orbitRadius;\nvar orbitAngle;\nvar numAsteroids;\nvar orbitInclinationAngle;\n\nvar heightmap_width = 700;\nvar heightmap_height = 400;\n\nvar dphi = 0.0;\nvar planetRotationDiff;\nvar rotationMomentum = 0.0;\n\nvar radius = 100;\nvar planetType;\nvar RED_TYPE = 0, EARTH_TYPE = 1, GAS_TYPE = 2;\nvar noise;\nvar imageData = ctx.createImageData(heightmap_width, heightmap_height);\nvar texture_data = imageData.data;\n\nvar stars;\n\ngenerate(false);\n\nfunction randomSeed() {\n  //Size of the seed between 1 and 20 character\n  var n = Math.ceil(Math.random() * 20);\n  var seed = \"\";\n\n  for (var i = 0; i < n; i++) {\n    //Concatenate a character form '!' (code 33) to '~' (code 126)\n    seed += String.fromCharCode(Math.round(Math.random() * (126 - 33)) + 33);\n  }\n\n  seedField.value = seed;\n  generate();\n}\n\nvar id = null;\n\nfunction generate(wait) {\n  if (wait) {\n    if (id !== null)\n      window.clearTimeout(id);\n\n    id = window.setTimeout(function () {\n      generate(false);\n    }, 300);\n\n    return;\n  }\n\n  const seed = seedField.value;\n  const rng = new RNG(seed);\n  const pixelSize = parseInt(pixelSizeField.value) || 5;\n\n  withAsteroids = false;\n  if (rng.unit() < 0.5) {\n    withAsteroids = true;\n  }\n\n  asteroids = [];\n  var orbitRadiusInner = rng.unit() * 100 + 120;\n  var orbitRadiusOuter = orbitRadiusInner + 50;\n  var diffRadius = orbitRadiusOuter - orbitRadiusInner;\n  orbitAngle = 0.0;\n  numAsteroids = rng.unit() * 200 + 75;\n  orbitInclinationAngle = -rng.unit() * Math.PI / 10.0;\n\n  if (withAsteroids) {\n    for (var a = 0; a < numAsteroids; a++) {\n      var angle = rng.unit() * Math.PI * 2.0;\n      var rad = orbitRadiusInner + rng.unit() * diffRadius;\n      var x = rad * Math.cos(angle),\n        y = (rng.unit() * 2.0 - 1.0) * 10.0,\n        z = rad * Math.sin(angle),\n        c = Math.round(rng.unit() * 2),\n        size = Math.round(rng.unit() * 5 + 5);\n\n      asteroids.push([x, y, z, angle, asteroidColors[c][0], asteroidColors[c][1], asteroidColors[c][2], size]);\n    }\n  }\n\n\n  planetRotationDiff = rng.unit() * 0.03;\n  noise = new PerlinNoise(new RNG(seed));\n\n  planetType = Math.round(rng.unit() * 2);\n\n  for (var x = 0; x < heightmap_width; x += pixelSize) {\n    for (var y = 0; y < heightmap_height; y += pixelSize) {\n      var phi = map(x, 0, heightmap_width - 1, (3.0 / 2.0) * Math.PI + dphi, -Math.PI / 2.0 + dphi),\n        theta = map(y, 0, heightmap_height - 1, Math.PI, 0);\n      var xx = radius * Math.abs(Math.sin(theta)) * Math.cos(phi),\n        yy = radius * Math.cos(theta),\n        zz = radius * Math.abs(Math.sin(theta)) * Math.sin(phi);\n\n      var amplitude = 1.0, frequency = 0.014;\n\n      var n = 0.0;\n      for (var o = 0; o < 3; o++) {\n        n += amplitude * noise.noise(xx * frequency, yy * frequency, zz * frequency);\n        amplitude *= 0.5;\n        frequency *= 2.0;\n      }\n      n += 1.0;\n      n *= 0.5;\n      n = Math.round(n * 255);\n\n      if (planetType === RED_TYPE) {\n        generateRedTypePlanet(n, texture_data, x, y, heightmap_width, pixelSize);\n      } else if (planetType === EARTH_TYPE) {\n        generateEarthTypePlanet(n, texture_data, x, y, heightmap_width, pixelSize);\n      } else if (planetType === GAS_TYPE) {\n        generateGasTypePlanet(n, texture_data, x, y, heightmap_width, pixelSize);\n      }\n    }\n  }\n\n  console.log(planetType);\n  // stars = [];\n  // for (var x = 0; x < 700; x++) {\n  //   for (var y = 0; y < 700; y++) {\n  //     var r = rng.unit();\n  //     if (r < 0.0005) {\n  //       stars.push([x, y]);\n  //     }\n  //   }\n  // }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n\n\nanimate(texture_data, radius);\n\nfunction animate(texture_data, radius) {\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, 700, 700);\n\n  var w = heightmap_width,\n    h = heightmap_height;\n  var imageData = ctx.createImageData(700, 700);\n  var data = imageData.data;\n\n  //Draw space and stars\n  // for (var x = 0; x < 700; x++) {\n  //   for (var y = 0; y < 700; y++) {\n  //     setColor(data, x, y, 700, 0, 0, 0, 255);\n  //   }\n  // }\n  // for (var s = 0; s < stars.length; s++) {\n  //   var star = stars[s];\n\n  //   setColor(data, star[0], star[1], 700, 255, 255, 255, 255);\n  // }\n\n  if (withAsteroids) {\n    var orbitAnglePerFrame = -0.03;\n    var astXYZ = [];\n    for (var a = 0; a < asteroids.length; a++) {\n      var asteroid = asteroids[a];\n      var astX = asteroid[0] * Math.cos(orbitAngle) - asteroid[2] * Math.sin(orbitAngle);\n      var astZ = asteroid[0] * Math.sin(orbitAngle) + asteroid[2] * Math.cos(orbitAngle);\n\n      astX = Math.round(astX) + 250;\n      var astY = Math.round(asteroid[1] * Math.cos(orbitInclinationAngle) - astZ * Math.sin(orbitInclinationAngle)) + 250;\n      astZ = Math.round(asteroid[1] * Math.sin(orbitInclinationAngle) + astZ * Math.cos(orbitInclinationAngle));\n\n      astXYZ.push(astX, astY, astZ);\n    }\n    orbitAngle += orbitAnglePerFrame;\n\n    for (var a = 0; a < astXYZ.length; a += 3) {\n      if (astXYZ[a + 2] < 0) {\n        setColor(data, astXYZ[a], astXYZ[a + 1], 700, asteroids[a / 3][4], asteroids[a / 3][5], asteroids[a / 3][6], 255, asteroids[a / 3][7]);\n      }\n    }\n  }\n\n  render_planet(data, texture_data, radius, w, h, 0, w, (3.0 / 2.0) * Math.PI, -Math.PI / 2.0);\n  // render_planet(data, texture_data, radius, w, h, 0, Math.round(w/4), (3.0/2.0)*Math.PI, Math.PI);\n  // render_planet(data, texture_data, radius, w, h, w-Math.round(w/4), w, 0, -Math.PI/2.0);\n  // render_planet(data, texture_data, radius, w, h, Math.round(w/4), w-Math.round(w/4), Math.PI, 0);\n\n  if (withAsteroids) {\n    for (var a = 0; a < astXYZ.length; a += 3) {\n      if (astXYZ[a + 2] >= 0) {\n        setColor(data, astXYZ[a], astXYZ[a + 1], 700, asteroids[a / 3][4], asteroids[a / 3][5], asteroids[a / 3][6], 255, asteroids[a / 3][7]);\n      }\n    }\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n\n  dphi -= planetRotationDiff + rotationMomentum;\n  //rotationMomentum *= 0.90;\n  if (mouseDown) {\n    dphi -= mouseDiff.x * 0.005;\n  }\n  // if(justReleasedMouse){\n  // \trotationMomentum = mouseDiff.x > 0 ? 1 : -1;\n  // \tjustReleasedMouse = false;\n  // }\n\n  window.requestAnimationFrame(function () {\n    animate(texture_data, radius);\n  });\n\n}\n\nfunction render_planet(canvas_data, texture_data, radius, w, h, x1, x2, angle1, angle2) {\n  for (var x = x1; x < x2; x++) {\n    for (var y = 0; y < h; y++) {\n      var phi = map(x, x1, x2, angle1 + dphi, angle2 + dphi),\n        theta = map(y, 0, h - 1, Math.PI, 0);\n\n      var r = texture_data[(x + y * w) * 4],\n        g = texture_data[(x + y * w) * 4 + 1],\n        b = texture_data[(x + y * w) * 4 + 2],\n        a = texture_data[(x + y * w) * 4 + 3];\n\n      var rad = radius;\n\n      var zz = rad * Math.abs(Math.sin(theta)) * Math.sin(phi),\n        xx = Math.round(rad * Math.abs(Math.sin(theta)) * Math.cos(phi)) + 250,\n        yy = Math.round(rad * Math.cos(theta)) + 250;\n      if (zz >= 0) {\n        setColor(canvas_data, xx, yy, 700, r, g, b, 255);\n      }\n    }\n  }\n}"]}